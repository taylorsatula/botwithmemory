{
  "check_async_task": "Checks the status of an asynchronous task using check_async_task. Takes a required task_id parameter (string) that uniquely identifies the task. Returns the task's current status (e.g., \"completed\", \"in progress\"), description, and result information if available. Use this to monitor long-running operations initiated by other tools.",
  "schedule_async_task": "Schedules a task to run asynchronously in the background using schedule_async_task. Takes required parameters: description (brief task summary), task_prompt (detailed instructions for execution), and optional notify_on_completion (boolean to receive notification when task completes). Returns a task_id that uniquely identifies the scheduled task for future reference.",
  "extract": "Extract specific information from user messages using the extract tool. Takes a required message parameter (string), optional template parameter (string) for predefined extraction patterns, optional target parameter (string) for specific information, and optional temperature parameter (number) for extraction flexibility. Returns structured data containing the extracted information in JSON format.",
  "persistence": "Store and retrieve data using the persistence tool. Supports operations: get_data (retrieves value by key from location), set_data (stores key-value pair at location), get_file (retrieves entire file content), and set_file (saves data to file). Parameters include operation (required), location (file path), key (for data operations), and value/data (for storing). Returns retrieved values or success status.",
  "weather_tool": "Retrieves current weather information using weather_tool. Requires location parameter (city/region name as string). Optional parameters: units (celsius/fahrenheit) and include_forecast (boolean). Returns temperature, weather conditions, humidity percentage, and wind speed. Use when needing current meteorological data for specific locations.",
  "tool_finder": "Retrieves or searches for tools using the tool_finder. Use with either tool_name parameter (string) to request a specific tool by name, or description parameter (string) to find tools matching functionality. Returns either a complete tool definition (for specific requests) or a list of matching tools with descriptions. Use this meta-tool when you need access to a tool that wasn't provided in your initial set of tools."
}