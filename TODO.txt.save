
						To-do:


TASK: Go through codebase and cull functionality that isn't relevant anymore or could be combined into single functionality without significant complexity

TASK: Evaluate project through the lens of being an iOS app and a server API. What tasks should be handled within the app programmatically, which should be handled off-device on the server, and which functionality requires a hybrid approach
^^ on that note evaluate if having a single external facing API interface is worthwhile.

TASK: Evaluate ways to call the API less often such as devising a system to have the main LLM return a unique string (not a tool call) and have that output trigger and kick off a task on the background llm.

TASK: Schedule the equivalent of cron jobs where the background llm can do sentiment analysis on the main conversation or continuously truncate the response.

TASK: When the project is nearly done look at it to identify security vulnerabilities and mitigation strategies

TASK: Add things the project /doesn't/ do to the README.md. Since this project is a base framework there are things that are outside the scope of what we're designing. End users should be aware of what they need to bring on their own when deploying the code.

TASK: provide a way to serve more than one user at a time (async tasks, user conversation history, long-term data saving and retrieval.

TASK: Implement a RESTful API server interface to allow external systems (other servers, iOS app) to:
- Send stimuli to the conversation system
- Retrieve conversation history and results
- Manage async tasks
- Authenticate and authorize different access levels
- Schedule notifications and events
- Implement webhooks for bidirectional communication
